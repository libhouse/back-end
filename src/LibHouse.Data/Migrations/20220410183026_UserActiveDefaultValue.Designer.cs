// <auto-generated />
using System;
using LibHouse.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibHouse.Data.Migrations
{
    [DbContext(typeof(LibHouseContext))]
    [Migration("20220410183026_UserActiveDefaultValue")]
    partial class UserActiveDefaultValue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("LibHouse.Business.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char(11)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_user_email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Owners.Owner", b =>
                {
                    b.HasBaseType("LibHouse.Business.Entities.Users.User");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Residents.Resident", b =>
                {
                    b.HasBaseType("LibHouse.Business.Entities.Users.User");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Users.User", b =>
                {
                    b.OwnsOne("LibHouse.Business.Entities.Users.Cpf", "CPF", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("char(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("CPF");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Owners.Owner", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("LibHouse.Business.Entities.Owners.Owner", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Residents.Resident", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("LibHouse.Business.Entities.Residents.Resident", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
