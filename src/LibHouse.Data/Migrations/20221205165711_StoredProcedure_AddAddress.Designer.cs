// <auto-generated />
using System;
using LibHouse.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibHouse.Data.Migrations
{
    [DbContext(typeof(LibHouseContext))]
    [Migration("20221205165711_StoredProcedure_AddAddress")]
    partial class StoredProcedure_AddAddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("LibHouse.Business.Entities.Localizations.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Description");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("NeighborhoodId")
                        .HasDatabaseName("idx_address_neighborhoodid");

                    b.ToTable("Address", "Business");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Localizations.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FederativeUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.HasIndex("FederativeUnitId")
                        .HasDatabaseName("idx_city_federativeunitid");

                    b.ToTable("City", "Business");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Localizations.FederativeUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AbbreviationOfTheFederativeUnit")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("Abbreviation");

                    b.HasKey("Id");

                    b.ToTable("FederativeUnit", "Business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbbreviationOfTheFederativeUnit = "AC"
                        },
                        new
                        {
                            Id = 2,
                            AbbreviationOfTheFederativeUnit = "AL"
                        },
                        new
                        {
                            Id = 3,
                            AbbreviationOfTheFederativeUnit = "AP"
                        },
                        new
                        {
                            Id = 4,
                            AbbreviationOfTheFederativeUnit = "AM"
                        },
                        new
                        {
                            Id = 5,
                            AbbreviationOfTheFederativeUnit = "BA"
                        },
                        new
                        {
                            Id = 6,
                            AbbreviationOfTheFederativeUnit = "CE"
                        },
                        new
                        {
                            Id = 7,
                            AbbreviationOfTheFederativeUnit = "DF"
                        },
                        new
                        {
                            Id = 8,
                            AbbreviationOfTheFederativeUnit = "ES"
                        },
                        new
                        {
                            Id = 9,
                            AbbreviationOfTheFederativeUnit = "GO"
                        },
                        new
                        {
                            Id = 10,
                            AbbreviationOfTheFederativeUnit = "MA"
                        },
                        new
                        {
                            Id = 11,
                            AbbreviationOfTheFederativeUnit = "MT"
                        },
                        new
                        {
                            Id = 12,
                            AbbreviationOfTheFederativeUnit = "MS"
                        },
                        new
                        {
                            Id = 13,
                            AbbreviationOfTheFederativeUnit = "MG"
                        },
                        new
                        {
                            Id = 14,
                            AbbreviationOfTheFederativeUnit = "PA"
                        },
                        new
                        {
                            Id = 15,
                            AbbreviationOfTheFederativeUnit = "PB"
                        },
                        new
                        {
                            Id = 16,
                            AbbreviationOfTheFederativeUnit = "PR"
                        },
                        new
                        {
                            Id = 17,
                            AbbreviationOfTheFederativeUnit = "PE"
                        },
                        new
                        {
                            Id = 18,
                            AbbreviationOfTheFederativeUnit = "PI"
                        },
                        new
                        {
                            Id = 19,
                            AbbreviationOfTheFederativeUnit = "RJ"
                        },
                        new
                        {
                            Id = 20,
                            AbbreviationOfTheFederativeUnit = "RN"
                        },
                        new
                        {
                            Id = 21,
                            AbbreviationOfTheFederativeUnit = "RS"
                        },
                        new
                        {
                            Id = 22,
                            AbbreviationOfTheFederativeUnit = "RO"
                        },
                        new
                        {
                            Id = 23,
                            AbbreviationOfTheFederativeUnit = "RR"
                        },
                        new
                        {
                            Id = 24,
                            AbbreviationOfTheFederativeUnit = "SC"
                        },
                        new
                        {
                            Id = 25,
                            AbbreviationOfTheFederativeUnit = "SP"
                        },
                        new
                        {
                            Id = 26,
                            AbbreviationOfTheFederativeUnit = "SE"
                        },
                        new
                        {
                            Id = 27,
                            AbbreviationOfTheFederativeUnit = "TO"
                        });
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Localizations.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .HasDatabaseName("idx_neighborhood_cityid");

                    b.ToTable("Neighborhood", "Business");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Residents.Preferences.ResidentPreferences", b =>
                {
                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResidentId");

                    b.HasIndex("ResidentId")
                        .IsUnique()
                        .HasDatabaseName("idx_residentpreferences_residentid");

                    b.ToTable("ResidentPreferences", "Business");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Users", "Business");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Owners.Owner", b =>
                {
                    b.HasBaseType("LibHouse.Business.Entities.Users.User");

                    b.ToTable("Owners", "Business");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Residents.Resident", b =>
                {
                    b.HasBaseType("LibHouse.Business.Entities.Users.User");

                    b.ToTable("Residents", "Business");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Localizations.Address", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Localizations.Neighborhood", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LibHouse.Business.Entities.Localizations.AddressComplement", "AddressComplement", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasMaxLength(255)
                                .HasColumnType("varchar(255)")
                                .HasColumnName("Complement");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Localizations.AddressNumber", "AddressNumber", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<short>("Number")
                                .HasColumnType("smallint")
                                .HasColumnName("Number");

                            b1.HasKey("AddressId");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Localizations.PostalCode", "PostalCode", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PostalCodeNumber")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("char(8)")
                                .HasColumnName("PostalCode");

                            b1.HasKey("AddressId");

                            b1.HasIndex("PostalCodeNumber")
                                .HasDatabaseName("idx_address_postalcode");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.Navigation("AddressComplement");

                    b.Navigation("AddressNumber");

                    b.Navigation("Neighborhood");

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Localizations.City", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Localizations.FederativeUnit", "FederativeUnit")
                        .WithMany()
                        .HasForeignKey("FederativeUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FederativeUnit");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Localizations.Neighborhood", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Localizations.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Residents.Preferences.ResidentPreferences", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Residents.Resident", "Resident")
                        .WithOne("ResidentPreferences")
                        .HasForeignKey("LibHouse.Business.Entities.Residents.Preferences.ResidentPreferences", "ResidentId");

                    b.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Charges.ChargePreferences", "ChargePreferences", b1 =>
                        {
                            b1.Property<Guid>("ResidentPreferencesResidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ResidentPreferencesResidentId");

                            b1.ToTable("ResidentPreferences");

                            b1.WithOwner()
                                .HasForeignKey("ResidentPreferencesResidentId");

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Charges.ExpensePreferences", "ExpensePreferences", b2 =>
                                {
                                    b2.Property<Guid>("ChargePreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("ChargePreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("ChargePreferencesResidentPreferencesResidentId");

                                    b2.OwnsOne("LibHouse.Business.Entities.Shared.MonetaryRange", "ExpenseRange", b3 =>
                                        {
                                            b3.Property<Guid>("ExpensePreferencesChargePreferencesResidentPreferencesResidentId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<decimal>("MaximumValue")
                                                .HasColumnType("decimal(6,2)")
                                                .HasColumnName("ChargePreferences_Expense_MaximumExpenseAmountDesired");

                                            b3.Property<decimal>("MinimumValue")
                                                .HasColumnType("decimal(6,2)")
                                                .HasColumnName("ChargePreferences_Expense_MinimumExpenseAmountDesired");

                                            b3.HasKey("ExpensePreferencesChargePreferencesResidentPreferencesResidentId");

                                            b3.ToTable("ResidentPreferences");

                                            b3.WithOwner()
                                                .HasForeignKey("ExpensePreferencesChargePreferencesResidentPreferencesResidentId");
                                        });

                                    b2.Navigation("ExpenseRange");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Charges.RentPreferences", "RentPreferences", b2 =>
                                {
                                    b2.Property<Guid>("ChargePreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("ChargePreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("ChargePreferencesResidentPreferencesResidentId");

                                    b2.OwnsOne("LibHouse.Business.Entities.Shared.MonetaryRange", "RentRange", b3 =>
                                        {
                                            b3.Property<Guid>("RentPreferencesChargePreferencesResidentPreferencesResidentId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<decimal>("MaximumValue")
                                                .HasColumnType("decimal(6,2)")
                                                .HasColumnName("ChargePreferences_Rent_MaximumRentAmountDesired");

                                            b3.Property<decimal>("MinimumValue")
                                                .HasColumnType("decimal(6,2)")
                                                .HasColumnName("ChargePreferences_Rent_MinimumRentAmountDesired");

                                            b3.HasKey("RentPreferencesChargePreferencesResidentPreferencesResidentId");

                                            b3.ToTable("ResidentPreferences");

                                            b3.WithOwner()
                                                .HasForeignKey("RentPreferencesChargePreferencesResidentPreferencesResidentId");
                                        });

                                    b2.Navigation("RentRange");
                                });

                            b1.Navigation("ExpensePreferences");

                            b1.Navigation("RentPreferences");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.General.GeneralPreferences", "GeneralPreferences", b1 =>
                        {
                            b1.Property<Guid>("ResidentPreferencesResidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ResidentPreferencesResidentId");

                            b1.ToTable("ResidentPreferences");

                            b1.WithOwner()
                                .HasForeignKey("ResidentPreferencesResidentId");

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.General.AnimalPreferences", "AnimalPreferences", b2 =>
                                {
                                    b2.Property<Guid>("GeneralPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("WantSpaceForAnimals")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("GeneralPreferences_Animal_WantSpaceForAnimals")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("GeneralPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("GeneralPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.General.ChildrenPreferences", "ChildrenPreferences", b2 =>
                                {
                                    b2.Property<Guid>("GeneralPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("AcceptChildren")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("GeneralPreferences_Children_AcceptChildren")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("GeneralPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("GeneralPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.General.PartyPreferences", "PartyPreferences", b2 =>
                                {
                                    b2.Property<Guid>("GeneralPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("WantsToParty")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("GeneralPreferences_Party_WantsToParty")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("GeneralPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("GeneralPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.General.RoommatePreferences", "RoommatePreferences", b2 =>
                                {
                                    b2.Property<Guid>("GeneralPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("AcceptsOnlyFemaleRoommates")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("GeneralPreferences_Roommate_AcceptsOnlyFemaleRoommates")
                                        .HasDefaultValueSql("0");

                                    b2.Property<bool>("AcceptsOnlyMaleRoommates")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("GeneralPreferences_Roommate_AcceptsOnlyMaleRoommates")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("GeneralPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("GeneralPreferencesResidentPreferencesResidentId");

                                    b2.OwnsOne("LibHouse.Business.Entities.Shared.Range", "AcceptedRangeOfRoommates", b3 =>
                                        {
                                            b3.Property<Guid>("RoommatePreferencesGeneralPreferencesResidentPreferencesResidentId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<byte>("InitialValue")
                                                .HasColumnType("tinyint")
                                                .HasColumnName("GeneralPreferences_Roommate_MinimumNumberOfRoommatesDesired");

                                            b3.Property<byte>("LastValue")
                                                .HasColumnType("tinyint")
                                                .HasColumnName("GeneralPreferences_Roommate_MaximumNumberOfRoommatesDesired");

                                            b3.HasKey("RoommatePreferencesGeneralPreferencesResidentPreferencesResidentId");

                                            b3.ToTable("ResidentPreferences");

                                            b3.WithOwner()
                                                .HasForeignKey("RoommatePreferencesGeneralPreferencesResidentPreferencesResidentId");
                                        });

                                    b2.Navigation("AcceptedRangeOfRoommates");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.General.SmokersPreferences", "SmokersPreferences", b2 =>
                                {
                                    b2.Property<Guid>("GeneralPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("AcceptSmokers")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("GeneralPreferences_Smokers_AcceptSmokers")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("GeneralPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("GeneralPreferencesResidentPreferencesResidentId");
                                });

                            b1.Navigation("AnimalPreferences");

                            b1.Navigation("ChildrenPreferences");

                            b1.Navigation("PartyPreferences");

                            b1.Navigation("RoommatePreferences");

                            b1.Navigation("SmokersPreferences");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Localizations.LocalizationPreferences", "LocalizationPreferences", b1 =>
                        {
                            b1.Property<Guid>("ResidentPreferencesResidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ResidentPreferencesResidentId");

                            b1.ToTable("ResidentPreferences");

                            b1.WithOwner()
                                .HasForeignKey("ResidentPreferencesResidentId");

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Localizations.LandmarkPreferences", "LandmarkPreferences", b2 =>
                                {
                                    b2.Property<Guid>("LocalizationPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("LandmarkAddressId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("LocalizationPreferences_Landmark_LandmarkAddressId");

                                    b2.HasKey("LocalizationPreferencesResidentPreferencesResidentId");

                                    b2.HasIndex("LandmarkAddressId")
                                        .HasDatabaseName("idx_residentpreferences_landmarkaddressid");

                                    b2.ToTable("ResidentPreferences");

                                    b2.HasOne("LibHouse.Business.Entities.Localizations.Address", "LandmarkAddress")
                                        .WithMany()
                                        .HasForeignKey("LandmarkAddressId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("LocalizationPreferencesResidentPreferencesResidentId");

                                    b2.Navigation("LandmarkAddress");
                                });

                            b1.Navigation("LandmarkPreferences");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Rooms.RoomPreferences", "RoomPreferences", b1 =>
                        {
                            b1.Property<Guid>("ResidentPreferencesResidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ResidentPreferencesResidentId");

                            b1.ToTable("ResidentPreferences");

                            b1.WithOwner()
                                .HasForeignKey("ResidentPreferencesResidentId");

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Rooms.BathroomPreferences", "BathroomPreferences", b2 =>
                                {
                                    b2.Property<Guid>("RoomPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("BathroomType")
                                        .IsRequired()
                                        .HasMaxLength(6)
                                        .HasColumnType("varchar(6)")
                                        .HasColumnName("RoomPreferences_Bathroom_BathroomType");

                                    b2.HasKey("RoomPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("RoomPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Rooms.DormitoryPreferences", "DormitoryPreferences", b2 =>
                                {
                                    b2.Property<Guid>("RoomPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("DormitoryType")
                                        .IsRequired()
                                        .HasMaxLength(6)
                                        .HasColumnType("varchar(6)")
                                        .HasColumnName("RoomPreferences_Dormitory_DormitoryType");

                                    b2.Property<bool>("RequireFurnishedDormitory")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("RoomPreferences_Dormitory_RequireFurnishedDormitory")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("RoomPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("RoomPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Rooms.GaragePreferences", "GaragePreferences", b2 =>
                                {
                                    b2.Property<Guid>("RoomPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("GarageIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("RoomPreferences_Garage_GarageIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("RoomPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("RoomPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Rooms.KitchenPreferences", "KitchenPreferences", b2 =>
                                {
                                    b2.Property<Guid>("RoomPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("MicrowaveIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("RoomPreferences_Kitchen_MicrowaveIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.Property<bool>("RefrigeratorIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("RoomPreferences_Kitchen_RefrigeratorIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.Property<bool>("StoveIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("RoomPreferences_Kitchen_StoveIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("RoomPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("RoomPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Rooms.OtherRoomPreferences", "OtherRoomPreferences", b2 =>
                                {
                                    b2.Property<Guid>("RoomPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("RecreationAreaIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("RoomPreferences_Other_RecreationAreaIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.Property<bool>("ServiceAreaIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("RoomPreferences_Other_ServiceAreaIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("RoomPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("RoomPreferencesResidentPreferencesResidentId");
                                });

                            b1.Navigation("BathroomPreferences");

                            b1.Navigation("DormitoryPreferences");

                            b1.Navigation("GaragePreferences");

                            b1.Navigation("KitchenPreferences");

                            b1.Navigation("OtherRoomPreferences");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Services.ServicesPreferences", "ServicesPreferences", b1 =>
                        {
                            b1.Property<Guid>("ResidentPreferencesResidentId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ResidentPreferencesResidentId");

                            b1.ToTable("ResidentPreferences");

                            b1.WithOwner()
                                .HasForeignKey("ResidentPreferencesResidentId");

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Services.CleaningPreferences", "CleaningPreferences", b2 =>
                                {
                                    b2.Property<Guid>("ServicesPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("HouseCleaningIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("ServicesPreferences_Cleaning_HouseCleaningIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("ServicesPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("ServicesPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Services.InternetPreferences", "InternetPreferences", b2 =>
                                {
                                    b2.Property<Guid>("ServicesPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("InternetServiceIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("ServicesPreferences_Internet_InternetServiceIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("ServicesPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("ServicesPreferencesResidentPreferencesResidentId");
                                });

                            b1.OwnsOne("LibHouse.Business.Entities.Residents.Preferences.Services.TelevisionPreferences", "TelevisionPreferences", b2 =>
                                {
                                    b2.Property<Guid>("ServicesPreferencesResidentPreferencesResidentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("CableTelevisionIsRequired")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bit")
                                        .HasColumnName("ServicesPreferences_Television_CableTelevisionIsRequired")
                                        .HasDefaultValueSql("0");

                                    b2.HasKey("ServicesPreferencesResidentPreferencesResidentId");

                                    b2.ToTable("ResidentPreferences");

                                    b2.WithOwner()
                                        .HasForeignKey("ServicesPreferencesResidentPreferencesResidentId");
                                });

                            b1.Navigation("CleaningPreferences");

                            b1.Navigation("InternetPreferences");

                            b1.Navigation("TelevisionPreferences");
                        });

                    b.Navigation("ChargePreferences");

                    b.Navigation("GeneralPreferences");

                    b.Navigation("LocalizationPreferences");

                    b.Navigation("Resident");

                    b.Navigation("RoomPreferences");

                    b.Navigation("ServicesPreferences");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Users.User", b =>
                {
                    b.OwnsOne("LibHouse.Business.Entities.Users.Cpf", "CPF", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("char(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("varchar(60)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("idx_user_email");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("LibHouse.Business.Entities.Users.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("varchar(15)")
                                .HasColumnName("Phone");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("CPF");

                    b.Navigation("Email");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Owners.Owner", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("LibHouse.Business.Entities.Owners.Owner", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Residents.Resident", b =>
                {
                    b.HasOne("LibHouse.Business.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("LibHouse.Business.Entities.Residents.Resident", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibHouse.Business.Entities.Residents.Resident", b =>
                {
                    b.Navigation("ResidentPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
